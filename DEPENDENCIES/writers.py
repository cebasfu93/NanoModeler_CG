import numpy as np

def gro_writer(TMP, np_xyz, inp):

    f = open(TMP+"/NP.gro", "w")
    f.write("NP.gro generated by NanoModeler_CG, t=0.0\n")
    f.write("{:d}\n".format(len(np_xyz)))

    n_at1, n_at2 = np.sum(inp.lig1_n_per_bead), np.sum(inp.lig2_n_per_bead)
    n_core = int(len(np_xyz) - inp.lig1_num*n_at1 - inp.lig2_num*n_at2)
    for i in range(n_core):
        res = 1
        ndx = i
        xyz = np_xyz[ndx]
        f.write("{:>5d}{:<5}{:>5}{:>5d}{:>8.3f}{:>8.3f}{:>8.3f}\n".format(res, "CORE", "MM", ndx+1, xyz[0], xyz[1], xyz[2]))

    for i in range(inp.lig1_num):
        res = i + 1
        for j in range(n_at1):
            ndx = n_core + i*n_at1 + j
            xyz = np_xyz[ndx]
            f.write("{:>5d}{:<5}{:>5}{:>5d}{:>8.3f}{:>8.3f}{:>8.3f}\n".format(res, "LIG1", "A{}".format(j), ndx+1, xyz[0], xyz[1], xyz[2]))

    for i in range(inp.lig2_num):
        res = i + inp.lig1_num + 1
        for j in range(n_at2):
            ndx = n_core + inp.lig1_num*n_at1 + i*n_at2 + j
            xyz = np_xyz[ndx]
            f.write("{:>5d}{:<5}{:>5}{:>5d}{:>8.3f}{:>8.3f}{:>8.3f}\n".format(res, "LIG2", "B{}".format(j), ndx+1, xyz[0], xyz[1], xyz[2]))

    f.write("{:>10.5f} {:>10.5f} {:>10.5f}".format(10,10,10))
    f.close()

def top_writer(TMP, np_xyz, lig_bonds, lig_angles, inp, params):
    n_at1 = np.sum(inp.lig1_n_per_bead)
    n_at2 = np.sum(inp.lig2_n_per_bead)
    n_core = int(len(np_xyz) - inp.lig1_num*n_at1 - inp.lig2_num*n_at2)

    btypes = [inp.core_btype]*n_core
    lig1_btypes_list, lig1_charges_list, lig1_masses_list, lig2_btypes_list, lig2_charges_list, lig2_masses_list = [], [], [], [], [], []
    for i in range(len(inp.lig1_btypes)):
        lig1_btypes_list += [inp.lig1_btypes[i]]*inp.lig1_n_per_bead[i]
        lig1_charges_list += [inp.lig1_charges[i]]*inp.lig1_n_per_bead[i]
        lig1_masses_list += [inp.lig1_masses[i]]*inp.lig1_n_per_bead[i]
    for i in range(len(inp.lig2_btypes)):
        lig2_btypes_list += [inp.lig2_btypes[i]*inp.lig2_n_per_bead[i]]
        lig2_charges_list += [inp.lig2_charges[i]]*inp.lig2_n_per_bead[i]
        lig2_masses_list += [inp.lig2_masses[i]]*inp.lig2_n_per_bead[i]
    btypes = btypes + lig1_btypes_list*inp.lig1_num + lig2_btypes_list*inp.lig2_num

    f = open(TMP+"/NP.top", "w")
    f.write(";NP.gro generated by NanoModeler_CG\n")

    f.write("\n[ moleculetype ]\n")
    f.write("NP \t\t 3\n")

    f.write("\n[ atoms ]\n")
    f.write(";   nr  type  resi  res  atom  cgnr       charge      mass      ; qtot\n")
    for i in range(n_core):
        res = 1
        at = i + 1
        f.write("{:>6d} {:>4} {:>5} {:>5} {:>5} {:>5} {:>12.6f}    {:<9.5f} ; qtot {:>6.3f}\n".format(at, inp.core_btype, res, "CORE", "MM", at, 0.0, inp.core_bmass, 0.0))
    q_tot = 0
    for i in range(inp.lig1_num):
        res = i + 1
        jumps = np.linspace(0, n_at1-1, n_at1, dtype='int')
        for j, btype, charge, mass in zip(jumps, lig1_btypes_list, lig1_charges_list, lig1_masses_list):
            q_tot += charge
            at = n_core + i*n_at1 + j + 1
            f.write("{:>6d} {:>4} {:>5} {:>5} {:>5} {:>5} {:>12.6f}    {:<9.5f} ; qtot {:>6.3f}\n".format(at, btype, res, "LIG1", "A{}".format(j), at, charge, mass, q_tot))
    for i in range(inp.lig2_num):
        res = inp.lig1_num + i + 1
        jumps = np.linspace(0, n_at2-1, n_at2, dtype='int')
        for j, btype, charge, mass in zip(jumps, lig2_btypes_list, lig2_charges_list, lig2_masses_list):
            q_tot += charge
            at = n_core + inp.lig1_num*n_at1 + i*n_at2 + j + 1
            f.write("{:>6d} {:>4} {:>5} {:>5} {:>5} {:>5} {:>12.6f}    {:<9.5f} ; qtot {:>6.3f}\n".format(at, btype, res, "LIG1", "B{}".format(j), at, charge, mass, q_tot))

    f.write("\n[ bonds ]\n")
    f.write(";  ai    aj funct           c0           c1\n")
    for bond in lig_bonds[0]:
        at1 = bond[0] + 1
        at2 = bond[1] + 1
        b_key = "{}-{}".format(btypes[bond[0]], btypes[bond[1]])
        b_top = params.bondtypes[b_key]
        f.write("{:>5d} {:>5d} {:>6d} {:>13.5f} {:>13.1f}\n".format(at1, at2, b_top[0], b_top[1], b_top[2]))
    for bond in lig_bonds[1]:
        at1 = bond[0] + 1
        at2 = bond[1] + 1
        b_key = "{}-{}".format(btypes[bond[0]], btypes[bond[1]])
        b_top = params.bondtypes[b_key]
        f.write("{:>5d} {:>5d} {:>6d} {:>13.5f} {:>13.1f}\n".format(at1, at2, b_top[0], b_top[1], b_top[2]))

    f.write("\n[ angles ]\n")
    f.write(";  ai    aj    ak funct        theta          cth\n")
    for angle in lig_angles[0]:
        at1 = angle[0] + 1
        at2 = angle[1] + 1
        at3 = angle[2] + 1
        a_key = "{}-{}-{}".format(btypes[angle[0]], btypes[angle[1]], btypes[angle[2]])
        a_top = params.angletypes[a_key]
        f.write("{:>5d} {:>5d} {:>5d} {:>6d} {:>9.4e}  {:>9.4e}\n".format(at1, at2, at3, a_top[0], a_top[1], a_top[2]))
    for angle in lig_angles[1]:
        at1 = angle[0] + 1
        at2 = angle[1] + 1
        at3 = angle[2] + 1
        a_key = "{}-{}-{}".format(btypes[angle[0]], btypes[angle[1]], btypes[angle[2]])
        a_top = params.angletypes[a_key]
        f.write("{:>5d} {:>5d} {:>5d} {:>6d} {:>9.4e}  {:>9.4e}\n".format(at1, at2, at3, a_top[0], a_top[1], a_top[2]))

    f.write("\n[ system ]\n")
    f.write("Nanoparticle prepared with NanoModeler_CG\n")

    f.write("\n[ molecules ]\n")
    f.write("; Compound        nmols\n")
    f.write("NP \t\t 1\n")
